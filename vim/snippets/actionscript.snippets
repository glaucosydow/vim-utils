snippet bindable
	[Bindable(event="${2:eventName}")]
snippet swf
	[SWF(width='${1:550}', height='${2:400}', backgroundColor='#${3:FFFFFF}', frameRate='${4:60}')]
snippet break
	break ${1:label};
snippet build
	---
	default:
	    - debug: false
	      open: public/${1:Main}.swf
	      extra: -use-network=false
	    
	library-path:
	    - ${2:source/swc}
	
	source-path:
	    - ${3:source/classes}
	    
	applications:
	    - class: source/classes/$1.as
	      output: public/$1.swf
snippet case
	case ${1:expression} :
		${2}
	break;
	${3}
snippet catch
	catch (e:${1:Error})
	{
		${2}
	}
snippet ?
	? ${1:trueExpression} : ${2:falseExpression}${3:;}
snippet const
	const ${1:name}:${2:Object};
snippet default
	default ${1:expression} :
		${2}
	break;
snippet dispatch
	dispatchEvent(new ${1:Event}(${2:Event}.${3:COMPLETE}));
	${4}
snippet dispose
	if(${1:target}){
		$1.dispose();
		safeRemoveChild($1);
		$1 = null;
	}
snippet do
	do
	{
		${2}
	}
	while (${1:true});
snippet else
	else
	{
		${1}
	}
snippet smartFor
	for (var ${1:i}:int = 0, ${2:el}:${3:*}; ${2:el} = ${4:elements}[${1:i}]; ${1:i}++)
	{
		${4}
	}
snippet foreach
	for each (var ${1:item}:${2:Object} in ${3:obj})
	{
		${4}
	}
snippet each
	each (var ${1:item}:${2:Object} in ${3:obj})
	{
		${4}
	}
snippet forin
	for (var ${1:p}:String in ${2:obj})
	{
		${3}
	}
snippet for for
	for (var ${1:i}:int = ${2:0}; $1 < ${3:n}; $1++)
	{
		${4}
	}
snippet if
	if (${1})
	{
		${2}
	}
snippet include
	inlcude ${1:filename.as};
snippet log
	Log.getLogger("${1:`echo ${TM_FILENAME%.as}`}").${2:error}(${3:message});
snippet <
	<${1:name}>${2}</$1>
snippet switch
	switch (${1})
	{
		${2}
	}
snippet throw
	throw new ${1:Error}("${2:Error Message}");
snippet try
	try
	{
		${1}
	} 
	catch (e:${3:Error})
	{
		${2}
	}
snippet tryFinally
	try
	{
		${1}
	}
	catch (e:${4:Error})
	{
		${2}
	} 
	finally
	{
		${3}
	}
snippet use
	use namespace ${1:nsName};
snippet doc
	/*
	 * ${1}
	 * */
snippet public
	${1:public} var ${2:name}:${3:Object};
snippet override
	override ${1:public} function ${2:name}(${3}):${4:void}{
		${5}
	}
snippet func
	${1:public} function ${2:name}(${3}):${4:void}{
		${5}
	}
snippet get
	${1:public} function get ${2:name}():${3:String}{
		${4}
	}
snippet set
	${1:public} function set ${2:name}(${3:value}:${4:Object}):void{
		${5}
	}
snippet var
	var ${1:name}:${2:Object}$;
snippet while
	while (${1})
	{
		${2}
	}
	${3}
snippet package
	package ${1} {
		import flash.display.*;
		import flash.events.*;
		
		public class ${2:MyClass} extends ${3:Sprite}{

			public function $2(){
				${4}
			}
		}
	}

snippet class
	public class ${1:MyClass} extends ${2:Sprite}{
	
		public function $1(){
			${3}
		}
	}
